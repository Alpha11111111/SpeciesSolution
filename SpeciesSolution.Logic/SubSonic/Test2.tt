<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="SQLSERVER.ttinclude" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>


<#
	var tables=LoadTables();
	var manager=Manager.Create(Host,GenerationEnvironment);
	foreach(var tbl in tables){
	if(!ExcludeTables.Contains(tbl.Name))
	{
		manager.StartNewFile(tbl.ClassName+"Bll.cs");	

#>
using System;
using System.Linq.Expressions;
using DotNet.Utilities;
using SpeciesSolution.DataAccess.DataModel;
using SpeciesSolution.DataAccess.DbHelper;

namespace <#=Namespace#>{

public partial class <#=tbl.CleanName#>Bll:LogicBase {

/***********************************************************************
 * 模版生成函数                                                        *
 ***********************************************************************/
	private const string const_CacheKey="Cach<#= tbl.Name #>";
	private const string const_CacheKey_Date="Cach<#= tbl.Name #>_Date";

	#region 单例模式
	private static <#= tbl.Name#>Bll _<#= tbl.Name#>Bll=null;
	///<summary>
	///获取本逻辑类单例
	///</summary>
	///<returns></returns>
	public static <#= tbl.Name #>Bll GetInstence(){
		if(_<#= tbl.Name #>Bll ==null){
		_<#= tbl.Name #>Bll=new <#= tbl.Name #>Bll();
		}
		return _<#= tbl.Name #>Bll;
	}
	#endregion

	#region 清空缓存
        /// <summary>清空缓存</summary>
        private void DelAllCache()
        {
            //清除模板缓存
            CacheHelper.RemoveOneCache(const_CacheKey);
			CacheHelper.RemoveOneCache(const_CacheKey_Date);

			//清除前台缓存
			CommonBll.RemoveCache(const_CacheKey);
			//运行自定义缓存清理程序
            DelCache();
        }
		#endregion


	#region 添加与编辑<#=tbl.Name#>表记录
	///<summary>
	///添加与编辑<#=tbl.Name#>记录
	///</summary>
	///<param name="model"><#=tbl.Name#>表实体</param>
	public void Save(<#= tbl.Name #> model){
		try{
			model.Save();
		}
		catch (Exception e){

		}
	}
	#endregion

	#region  删除<#=tbl.Name#>表记录
	/// <summary>
    /// 删除<#=tbl.Name#>表记录
    /// </summary>
    /// <param name="id">记录的主键值</param>
    public void Delete(int id) {
        //设置Sql语句
        var sql = "delete from <#=tbl.Name#> where Id = " + id;

        //删除
        var deleteHelper = new DeleteHelper();
        deleteHelper.Delete(sql);
        
        //删除缓存
        //DelCache();
        
        //添加用户操作记录
        //UseLogBll.GetInstence().Save("{0}删除了<#=tbl.Name#>表id为【" + id + "】的记录！");
    }
	/// <summary>
    /// 删除<#=tbl.Name#>表记录
    /// </summary>
    /// <param name="id">记录的主键值</param>
    public void Delete(int[] id) {
		if(id==null) return;
		var str=string.Join(",",id);

        //设置Sql语句
        var sql = "delete from <#=tbl.Name#> where Id in (" + str+")";

        //删除
        var deleteHelper = new DeleteHelper();
        deleteHelper.Delete(sql);
        
        //删除缓存
        //DelCache();
        
        //添加用户操作记录
        //UseLogBll.GetInstence().Save("{0}删除了<#=tbl.Name#>表id为【" + id + "】的记录！");
    }
	/// <summary>
    /// 获取数据表中的某个值——从数据库中查询，如果使用了缓存，删除成功后会清空本表的所有缓存记录，然后重新加载进缓存
    /// </summary>
    /// <param name="expression">条件语句</param>
    /// <returns></returns>
    public void Delete(Expression<Func<<#=tbl.Name#>, bool>> expression)
    {
        //执行删除
        <#=tbl.Name#>.Delete(expression);
        
        //删除缓存
        //DelCache();
        
        //添加用户操作记录
        //UseLogBll.GetInstence().Save(page, "{0}删除了<#=tbl.Name#>表记录！");
    }

	#endregion



	<#
		foreach(var col in tbl.Columns){
			if(col.CleanName.IndexOf("_Id")>=0 && (col.SysType=="int" || col.SysType=="long")){
	#>
	#region 删除<#=tbl.Name#>表指定<#=col.CleanName#>的字段值记录
	public void DeleteBy<#= col.CleanName #>(int id){
		//delete
		<#= tbl.Name #>.Delete(x=>x.<#= col.CleanName #>==id);
	}
	
	public void DeleteBy<#= col.CleanName #>(int[] id){
		//delete
		if(id ==null) return;
		var str=string.Join(",",id);
		var sql ="delete from <#= tbl.Name #> where <#= col.CleanName #> in ("+str+")";
		var deleteHelper=new DeleteHelper();
		deleteHelper.Delete(sql);		
	}
	#endregion
	<# 
            }
			else if(col.CleanName.IndexOf("Name")>=0 && col.SysType=="string"){        
	 #>	
	 #region 获取<#=col.CleanName #>字段值
     /// <summary>
     /// 获取<#=col.CleanName #>字段值
     /// </summary>
     /// <param name="pkValue">主键Id</param>
     /// <returns></returns>
     public string Get<#=col.CleanName #>(int pkValue)
     {
         //从数据库中查询
         var model = <#=tbl.Name#>.SingleOrDefault(x => x.Id == pkValue);
         return model == null ? "" : model.<#=col.CleanName #>;            
     }
     #endregion
	 <# 
            }
        }
	 
	  #>
}
}
<#
		manager.EndBlock();
		}//end if(!ExcludeTables.Contains(tbl.Name))
}//end foreach
manager.Process(true);
#>

